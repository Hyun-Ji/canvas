var path = require('path');
var extname = path.extname;
var gulp = require('gulp');
var gulpif = require('gulp-if');
var less = require('gulp-less');
var uglify = require('gulp-uglify');
var cssmin = require('gulp-cssmin');
var transport = require('gulp-transport');
var extend = transport.util.extendOption;
var EventProxy = require('eventproxy');
var concat = require('./concat');
var src = require('./src');

module.exports = buildFile;

function buildFile(file, options, cb) {
  var ext = extname(file).substring(1);

  if (~['css', 'less', 'sass', 'styl'].indexOf(ext)) {
    buildCss(file, options, cb);
  } else {
    buildJs(file, options, cb);
  }
}

function buildCss(file, options, cb) {
  var ep = new EventProxy();
  ep.all(['file', 'debugFile'], cb);

  var opt = extend(options);
  gulp.src(file, opt)
    .pipe(gulpif(/\.less$/, less()))
    .pipe(gulpif(/\.css$/, transport.cssParser(opt)))
    .pipe(cssmin())
    .pipe(gulp.dest(opt.dest))
    .on('end', function() {
      ep.emit('file');
    });

  //debug file
  var optDebug = extend(options);
  optDebug.rename = {suffix: '-debug'};
  gulp.src(file, optDebug)
    .pipe(gulpif(/\.less$/, less()))
    .pipe(gulpif(/\.css$/, transport.cssParser(optDebug)))
    .pipe(gulp.dest(optDebug.dest))
    .on('end', function() {
      ep.emit('debugFile');
    });
}

function buildJs(file, options, cb) {
  var ep = new EventProxy();
  ep.all(['file', 'debugFile'], cb);

  var opt = extend(options);
  src(file, opt)
    .pipe(gulpif(/\.less$/, less()))
    .pipe(gulpif(/\.css$/, transport.cssParser(opt)))
    .pipe(gulpif(/\.css$/, transport.css2jsParser(opt)))
    .pipe(gulpif(/\.tpl$/, transport.tplParser(opt)))
    .pipe(gulpif(/\.json$/, transport.jsonParser(opt)))
    .pipe(gulpif(/\.handlebars$/, transport.handlebarsParser(opt)))
    .pipe(gulpif(/\.js$/, transport(opt)))
    .pipe(concat())
    .pipe(uglify())
    .pipe(gulp.dest(opt.dest))
    .on('end', function() {
      ep.emit('file');
    });

  //debug file
  var optDebug = extend(options);
  optDebug.rename = {suffix: '-debug'};
  src(file, optDebug)
    .pipe(gulpif(/\.less$/, less()))
    .pipe(gulpif(/\.css$/, transport.cssParser(opt))) // 这里不替换 debug
    .pipe(gulpif(/\.css$/, transport.css2jsParser(optDebug)))
    .pipe(gulpif(/\.tpl$/, transport.tplParser(optDebug)))
    .pipe(gulpif(/\.json$/, transport.jsonParser(optDebug)))
    .pipe(gulpif(/\.handlebars$/, transport.handlebarsParser(optDebug)))
    .pipe(gulpif(/\.js$/, transport(optDebug)))
    .pipe(concat())
    .pipe(gulp.dest(optDebug.dest))
    .on('end', function() {
      ep.emit('debugFile');
    });
}
