require('should');
var umi = require('..');
var fs = require('fs');
var join = require('path').join;
var Package = umi.Package;
var transport = umi.transport;
var concat = umi.concat;
var build = umi.build;
var buildFile = umi.buildFile;
var gulp = require('gulp');
var gulpif = require('gulp-if');
var less = require('gulp-less');
var beautify = require('gulp-beautify');
var clean = require('gulp-clean');

describe('Umi', function() {

  it('pkg missing', function() {
    (function() {
      umi.src('a.js');
    }).should.throw('missing pkg');
  });

  it('self', function(done) {
    var cwd = join(__dirname, '/fixtures/relative');
    var pkg = new Package(cwd);
    umi.src(pkg.main, {pkg: pkg, cwd: cwd, include: 'self'})
      .pipe(transport({pkg: pkg}))
      .pipe(concat())
      .pipe(beautify({indentSize: 2}))
      .on('data', function(file) {
        file.path.should.endWith('a.js');
        assert(file, 'transport-self.js');
        done();
      });
  });

  it('relative', function(done) {
    var cwd = join(__dirname, '/fixtures/relative');
    var pkg = new Package(cwd);
    umi.src(pkg.main, {pkg: pkg, cwd: cwd})
      .pipe(transport({pkg: pkg}))
      .pipe(concat())
      .pipe(beautify({indentSize: 2}))
      .on('data', function(file) {
        file.path.should.endWith('a.js');
        assert(file, 'transport-relative.js');
        done();
      });
  });

  it('all', function(done) {
    var cwd = join(__dirname, '/fixtures/all');
    var pkg = new Package(cwd);
    umi.src(pkg.main, {pkg: pkg, cwd: cwd, include: 'all'})
      .pipe(gulpif(/\.css$/, transport.cssParser({pkg: pkg})))
      .pipe(gulpif(/\.css$/, transport.css2jsParser({pkg: pkg})))
      .pipe(gulpif(/\.js$/, transport({pkg: pkg})))
      .pipe(concat())
      .pipe(beautify({indentSize: 2}))
      .on('data', function(file) {
        file.path.should.endWith('a.js');
        assert(file, 'transport-all.js');
      })
      .on('end', done);
  });

  describe('css import', function() {
    var cwd = join(__dirname, '/fixtures/css-import');
    var pkg = new Package(cwd);

    it('relative css', function(done) {
      gulp.src('a1.css', {cwd: cwd})
        .pipe(transport.cssParser({pkg: pkg}))
        .on('data', function(file) {
          assert(file, 'import-relative.css');
          done();
        });
    });

    it('css package', function(done) {
      gulp.src('index.css', {cwd: cwd})
        .pipe(transport.cssParser({pkg: pkg}))
        .on('data', function(file) {
          assert(file, 'import-all.css');
          done();
        });
    });
  });

  describe('js require', function() {
    var cwd = join(__dirname, '/fixtures/js-require');
    var pkg = new Package(cwd, {extraDeps: {handlebars: 'handlebars'}});

    it('self', function(done) {
      umi.src('css-package.js', {pkg: pkg, cwd: cwd, include: 'self'})
        .pipe(gulpif(/\.css$/, transport.cssParser({pkg: pkg})))
        .pipe(gulpif(/\.css$/, transport.css2jsParser({pkg: pkg})))
        .pipe(gulpif(/\.js$/, transport({pkg: pkg})))
        .pipe(concat())
        .pipe(beautify({indentSize: 2}))
        .on('data', function(file) {
          file.path.should.endWith('css-package.js');
          assert(file, 'ext-css.js');
        })
        .on('end', done);
    });

    it('tpl', function(done) {
      umi.src('tpl.js', {pkg: pkg, cwd: cwd})
        .pipe(gulpif(/\.tpl$/, transport.tplParser({pkg: pkg})))
        .pipe(gulpif(/\.js$/, transport({pkg: pkg})))
        .pipe(concat())
        .pipe(beautify({indentSize: 2}))
        .on('data', function(file) {
          file.path.should.endWith('tpl.js');
          assert(file, 'ext-tpl.js');
          done();
        });
    });

    it('json', function(done) {
      umi.src('json.js', {pkg: pkg, cwd: cwd})
        .pipe(gulpif(/\.json$/, transport.jsonParser({pkg: pkg})))
        .pipe(gulpif(/\.js$/, transport({pkg: pkg})))
        .pipe(concat())
        .pipe(beautify({indentSize: 2}))
        .on('data', function(file) {
          file.path.should.endWith('json.js');
          assert(file, 'ext-json.js');
          done();
        });
    });

    it('css2js', function(done) {
      umi.src('css2js.js', {pkg: pkg, cwd: cwd})
        .pipe(gulpif(/\.css$/, transport.cssParser({pkg: pkg})))
        .pipe(gulpif(/\.css$/, transport.css2jsParser({pkg: pkg})))
        .pipe(gulpif(/\.js$/, transport({pkg: pkg})))
        .pipe(concat())
        .pipe(beautify({indentSize: 2}))
        .on('data', function(file) {
          file.path.should.endWith('css2js.js');
          assert(file, 'ext-css2js.js');
          done();
        });
    });

    it('css package', function(done) {
      umi.src('css-package.js', {pkg: pkg, cwd: cwd})
        .pipe(gulpif(/\.css$/, transport.cssParser({pkg: pkg})))
        .pipe(gulpif(/\.css$/, transport.css2jsParser({pkg: pkg})))
        .pipe(gulpif(/\.js$/, transport({pkg: pkg})))
        .pipe(concat())
        .pipe(beautify({indentSize: 2}))
        .on('data', function(file) {
          file.path.should.endWith('css-package.js');
          assert(file, 'ext-css.js');
        })
        .on('end', done);
    });

    it('less', function(done) {
      umi.src('less.js', {pkg: pkg, cwd: cwd})
        .pipe(gulpif(/\.less$/, less()))
        .pipe(gulpif(/\.css$/, transport.css2jsParser({pkg: pkg})))
        .pipe(gulpif(/\.js$/, transport({pkg: pkg})))
        .pipe(concat())
        .pipe(beautify({indentSize: 2}))
        .on('data', function(file) {
          file.path.should.endWith('less.js');
          assert(file, 'ext-less.js');
          done();
        });
    });

    it('handlebars', function(done) {
      umi.src('handlebars.js', {pkg: pkg, cwd: cwd})
        .pipe(gulpif(/\.handlebars$/, transport.handlebarsParser({pkg: pkg})))
        .pipe(gulpif(/\.js$/, transport({pkg: pkg})))
        .pipe(concat())
        .pipe(beautify({indentSize: 2}))
        .on('data', function(file) {
          file.path.should.endWith('handlebars.js');
          assert(file, 'ext-handlebars.js');
          done();
        });
    });
  });

  describe('build', function() {
    var cwd = join(__dirname, '/fixtures/all');
    var dest = join(__dirname, '/fixtures/tmp');
    var expected = join(__dirname, '/expected');
    var pkg = new Package(cwd, {extraDeps: {handlebars: 'handlebars'}});

    afterEach(function(done) {
      gulp.src(dest)
        .pipe(clean())
        .on('end', done);
    });

    it('build js relative', function(done) {
      var opt = {
        pkg: pkg,
        dest: dest,
        cwd: cwd
      };
      buildFile('a.js', opt, function() {
        (fs.readFileSync(join(dest, 'a.js')).toString() + '\n')
          .should.be.eql(fs.readFileSync(join(expected, 'build-js-relative.js')).toString());
        (fs.readFileSync(join(dest, 'a-debug.js')).toString() + '\n')
          .should.be.eql(fs.readFileSync(join(expected, 'build-js-relative-debug.js')).toString());
        done();
      });
    });

    it('build js all', function(done) {
      var opt = {
        pkg: pkg,
        dest: dest,
        cwd: cwd,
        include: 'all'
      };
      buildFile('a.js', opt, function() {
        (fs.readFileSync(join(dest, 'a.js')).toString() + '\n')
          .should.be.eql(fs.readFileSync(join(expected, 'build-js-all.js')).toString());
        (fs.readFileSync(join(dest, 'a-debug.js')).toString() + '\n')
          .should.be.eql(fs.readFileSync(join(expected, 'build-js-all-debug.js')).toString());
        done();
      });
    });

    it('build css', function(done) {
      var opt = {
        pkg: pkg,
        dest: dest,
        cwd: cwd
      };
      buildFile('c.css', opt, function() {
        (fs.readFileSync(join(dest, 'c.css')).toString() + '\n')
          .should.be.eql(fs.readFileSync(join(expected, 'build-css.css')).toString());
        (fs.readFileSync(join(dest, 'c-debug.css')).toString() + '\n')
          .should.be.eql(fs.readFileSync(join(expected, 'build-css-debug.css')).toString());
        done();
      });
    });

    it('build', function(done) {
      var opt = {
        pkg: pkg,
        dest: dest,
        cwd: cwd,
        output: true
      };
      build(cwd, opt, function() {
        fs.readdirSync(dest).should.eql([ 'a-debug.js',
          'a.js',
          'b-debug.js',
          'b.js',
          'c-debug.css',
          'c.css'
        ]);
        (fs.readFileSync(join(dest, 'a.js')).toString() + '\n')
          .should.be.eql(fs.readFileSync(join(expected, 'build-js-relative.js')).toString());
        (fs.readFileSync(join(dest, 'a-debug.js')).toString() + '\n')
          .should.be.eql(fs.readFileSync(join(expected, 'build-js-relative-debug.js')).toString());
        (fs.readFileSync(join(dest, 'c.css')).toString() + '\n')
          .should.be.eql(fs.readFileSync(join(expected, 'build-css.css')).toString());
        (fs.readFileSync(join(dest, 'c-debug.css')).toString() + '\n')
          .should.be.eql(fs.readFileSync(join(expected, 'build-css-debug.css')).toString());
        done();
      });
    });
  });

  it('buildArgs', function() {
    var cwd = join(__dirname, '/fixtures/option');
    var ret1 = umi.buildArgs({a: 1, include: 'self', cwd: cwd});
    ret1.should.eql({
      '_': [],
      include: 'self',
      a: 1,
      dest: './tmp',
      src: './src',
      cwd: cwd,
      idleading: '{{name}}/{{version}}',
      ignore: [],
      output: false
    });
  });

});

function assert(file, path) {
  var expected = file.contents.toString() + '\n';
  var actual = fs.readFileSync(join(__dirname, '/expected/', path)).toString();
  expected.should.eql(actual);
}
